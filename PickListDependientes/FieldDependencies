public class FieldDependencies {

	public class MyPickListInfo {
		public String validFor;
	}

	/**
	 * @param {String} objectName           El nombre del sObject que contiene los picklist. Puede ser Standard o Custom
	 * @param {String} controllingField  	Nombre de la picklist de control
	 * @param {String} dependentField  		Nombre de la picklist dependiente

	  @returns Devuelve un mapa donde las key son todos los campos de la picklist de control, y la lists de Strings corresponde a todos 
	  		   los valores de la picklist dependiente para esa key.
	 */
	public static Map<String, List<String>> getFieldDependencies(String objectName, String controllingField, String dependentField) {
		Map<String, List<String>> controllingInfo = new Map<String, List<String>>();

		Schema.SObjectType objType = Schema.getGlobalDescribe().get(objectName);

		Schema.DescribeSObjectResult describeResult = objType.getDescribe();
		Schema.DescribeFieldResult controllingFieldInfo = describeResult.fields.getMap().get(controllingField).getDescribe();
		Schema.DescribeFieldResult dependentFieldInfo = describeResult.fields.getMap().get(dependentField).getDescribe();

		List<Schema.PicklistEntry> controllingValues = controllingFieldInfo.getPicklistValues();
		List<Schema.PicklistEntry> dependentValues = dependentFieldInfo.getPicklistValues();

		for(Schema.PicklistEntry currControllingValue : controllingValues) {
			controllingInfo.put(currControllingValue.getLabel(), new List<String>());
		}

		for(Schema.PicklistEntry currDependentValue : dependentValues) {
			String jsonString = JSON.serialize(currDependentValue);

			MyPickListInfo info = (MyPickListInfo) JSON.deserialize(jsonString, MyPickListInfo.class);

			String hexString = EncodingUtil.convertToHex(EncodingUtil.base64Decode(info.validFor)).toUpperCase();


			Integer baseCount = 0;

			for(Integer curr : hexString.getChars()) {
				Integer val = 0;

				if(curr >= 65)	{
					val = curr - 65 + 10;
				}
				else {
					val = curr - 48;
				}

				if((val & 8) == 8)	{
					controllingInfo.get(controllingValues[baseCount + 0].getLabel()).add(currDependentValue.getLabel());
				}
				if((val & 4) == 4) {
					controllingInfo.get(controllingValues[baseCount + 1].getLabel()).add(currDependentValue.getLabel());                    
				}
				if((val & 2) == 2)	{
					controllingInfo.get(controllingValues[baseCount + 2].getLabel()).add(currDependentValue.getLabel());                    
				}
				if((val & 1) == 1)	{
					controllingInfo.get(controllingValues[baseCount + 3].getLabel()).add(currDependentValue.getLabel());                    
				}

				baseCount += 4;
			}            
		} 
	return controllingInfo;
	}	
}
